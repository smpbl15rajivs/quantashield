from datetime import datetime
from .user import db

class Vulnerability(db.Model):
    __tablename__ = 'vulnerabilities'
    
    id = db.Column(db.Integer, primary_key=True)
    cve_id = db.Column(db.String(20), unique=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    severity = db.Column(db.String(20))  # critical, high, medium, low
    cvss_score = db.Column(db.Numeric(3, 1))
    published_date = db.Column(db.Date)
    modified_date = db.Column(db.Date)
    
    # Relationships
    assets = db.relationship('AssetVulnerability', back_populates='vulnerability', cascade='all, delete-orphan')

    def __repr__(self):
        return f'<Vulnerability {self.cve_id or self.title}>'

    def to_dict(self):
        return {
            'id': self.id,
            'cve_id': self.cve_id,
            'title': self.title,
            'description': self.description,
            'severity': self.severity,
            'cvss_score': float(self.cvss_score) if self.cvss_score else None,
            'published_date': self.published_date.isoformat() if self.published_date else None,
            'modified_date': self.modified_date.isoformat() if self.modified_date else None
        }

class AssetVulnerability(db.Model):
    __tablename__ = 'asset_vulnerabilities'
    
    asset_id = db.Column(db.Integer, db.ForeignKey('assets.id'), primary_key=True)
    vulnerability_id = db.Column(db.Integer, db.ForeignKey('vulnerabilities.id'), primary_key=True)
    discovered_at = db.Column(db.DateTime, default=datetime.utcnow)
    status = db.Column(db.String(20), default='open')  # open, patched, mitigated, false_positive
    remediation_notes = db.Column(db.Text)
    
    # Relationships
    asset = db.relationship('Asset', back_populates='vulnerabilities')
    vulnerability = db.relationship('Vulnerability', back_populates='assets')

    def to_dict(self):
        return {
            'asset_id': self.asset_id,
            'vulnerability_id': self.vulnerability_id,
            'discovered_at': self.discovered_at.isoformat() if self.discovered_at else None,
            'status': self.status,
            'remediation_notes': self.remediation_notes,
            'vulnerability': self.vulnerability.to_dict() if self.vulnerability else None
        }

